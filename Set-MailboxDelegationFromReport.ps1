<#
.SYNOPSIS
Applies mailbox delegation permissions from a CSV report generated by Invoke-MailboxDelegationReport.ps1.

.DESCRIPTION
This script reads a delegation report CSV and applies the permissions to mailboxes in the target Exchange Online tenant.
Supports domain replacement for both target mailboxes and delegates to facilitate cross-tenant migrations.
Optionally creates mailboxes before setting permissions with retry logic for replication delays.

.PARAMETER InputCsvPath
Required. Path to CSV file generated by Invoke-MailboxDelegationReport.ps1.

.PARAMETER OutputPath
Directory path where the operation report will be saved. Defaults to current working directory.

.PARAMETER ReplaceMailboxDomain
Optional. Replaces the domain of target mailboxes from the CSV. Example: if CSV has john.doe@oldtenant.com
and this parameter is "newtenant.com", permissions will be set on john.doe@newtenant.com.

.PARAMETER ReplaceDelegateDomain
Optional. Replaces the domain of delegates from the CSV. Example: if CSV has delegate@oldtenant.com
and this parameter is "newtenant.com", the delegate identity will be delegate@newtenant.com.

.PARAMETER CreateEXOMailbox
Switch to create Exchange Online mailboxes before setting permissions. Cannot be used with -CreateOnPremMailbox.
After mailbox creation, waits 5 minutes before setting permissions to allow for replication.

.PARAMETER CreateOnPremMailbox
Switch to create on-premises mailboxes (requires hybrid environment). Cannot be used with -CreateEXOMailbox.
After mailbox creation, waits 5 minutes before setting permissions to allow for replication.

.PARAMETER MaxRetries
Maximum number of retry attempts when setting permissions fails due to replication delays. Default is 3.

.PARAMETER RetryDelaySeconds
Number of seconds to wait between retry attempts. Default is 300 (5 minutes).

.PARAMETER WhatIf
Shows what would be changed without making actual modifications.

.PARAMETER Confirm
Prompts for confirmation before making changes. Use -Confirm:$false to bypass prompts.

.PARAMETER Verbose
Provides detailed output during execution.

.EXAMPLE
.\Set-MailboxDelegationFromReport.ps1 -InputCsvPath "C:\Reports\MailboxDelegationReport_20250107.csv"
Applies permissions from the CSV using original email addresses.

.EXAMPLE
.\Set-MailboxDelegationFromReport.ps1 -InputCsvPath "report.csv" -ReplaceMailboxDomain "newtenant.com" -ReplaceDelegateDomain "newtenant.com"
Applies permissions but replaces both mailbox and delegate domains to newtenant.com.

.EXAMPLE
.\Set-MailboxDelegationFromReport.ps1 -InputCsvPath "report.csv" -CreateEXOMailbox -ReplaceMailboxDomain "newtenant.com"
Creates Exchange Online mailboxes first, then applies permissions after replication delay.

.EXAMPLE
.\Set-MailboxDelegationFromReport.ps1 -InputCsvPath "report.csv" -CreateOnPremMailbox -MaxRetries 5 -RetryDelaySeconds 600
Creates on-premises mailboxes and retries up to 5 times with 10-minute delays if permissions fail.

.EXAMPLE
.\Set-MailboxDelegationFromReport.ps1 -InputCsvPath "report.csv" -WhatIf
Simulates applying permissions without making changes.

.NOTES
Author: Hudson Bush, Seguri - hudson@seguri.io
Requires: Exchange Online Management module (required), on-premises Exchange PowerShell (optional for -CreateOnPremMailbox)
Prerequisites:
  - Active Exchange Online session (Connect-ExchangeOnline)
  - For -CreateOnPremMailbox: Active on-premises Exchange PowerShell session
  - Appropriate permissions for mailbox operations and delegation
Output: CSV report of permission application results
#>

[CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'High')]
param(
    [Parameter(Mandatory)]
    [string]$InputCsvPath,

    [string]$OutputPath = (Get-Location).Path,

    [string]$ReplaceMailboxDomain,

    [string]$ReplaceDelegateDomain,

    [switch]$CreateEXOMailbox,

    [switch]$CreateOnPremMailbox,

    [int]$MaxRetries = 3,

    [int]$RetryDelaySeconds = 300
)

# Validate mutually exclusive parameters
if ($CreateEXOMailbox -and $CreateOnPremMailbox)
{
    Write-Error "Cannot specify both -CreateEXOMailbox and -CreateOnPremMailbox. Choose one or neither."
    exit 1
}

# Generate output file path
$OutputFile = Join-Path $OutputPath "MailboxDelegationApplied_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"
$ErrorFile = Join-Path $OutputPath "MailboxDelegationErrors_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"

Write-Information "Starting Mailbox Delegation Permission Application..." -InformationAction Continue

if ($WhatIfPreference)
{
    Write-Warning "Running in SIMULATION mode - no changes will be made"
}

try
{
    # Validate input CSV exists
    if (-not (Test-Path $InputCsvPath))
    {
        Write-Error "Input CSV file not found: $InputCsvPath"
        exit 1
    }

    Write-Information "Reading delegation report from: $InputCsvPath" -InformationAction Continue
    $delegationData = Import-Csv $InputCsvPath

    if (-not $delegationData -or $delegationData.Count -eq 0)
    {
        Write-Error "CSV file is empty or could not be read: $InputCsvPath"
        exit 1
    }

    Write-Information "Found $($delegationData.Count) delegation records in CSV" -InformationAction Continue

    # Validate CSV structure - detect if this is standard or reverse lookup format
    $csvColumns = $delegationData | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name

    # Check for required columns
    $requiredColumns = @("MailboxUPN", "PermissionType")
    foreach ($column in $requiredColumns)
    {
        if (-not ($delegationData | Get-Member -Name $column -MemberType NoteProperty))
        {
            Write-Error "CSV file must contain a '$column' column. This CSV may not be from Invoke-MailboxDelegationReport.ps1"
            Write-Information "Available columns: $($csvColumns -join ', ')" -InformationAction Continue
            exit 1
        }
    }

    # Detect CSV format and provide helpful warnings
    $hasDelegate = $delegationData | Get-Member -Name "Delegate" -MemberType NoteProperty
    $hasUserUPN = $delegationData | Get-Member -Name "UserUPN" -MemberType NoteProperty

    if ($hasUserUPN -and -not $hasDelegate)
    {
        Write-Warning "Detected REVERSE LOOKUP format CSV (has 'UserUPN' column but no 'Delegate' column)."
        Write-Warning "This script expects STANDARD delegation report format with these columns:"
        Write-Warning "  - MailboxUPN, MailboxName, MailboxType, PermissionType, Delegate"
        Write-Warning ""
        Write-Warning "Your CSV appears to be from: .\Invoke-MailboxDelegationReport.ps1 -ReverseLookup"
        Write-Warning "But this script needs CSV from: .\Invoke-MailboxDelegationReport.ps1 (without -ReverseLookup)"
        Write-Warning ""
        Write-Warning "Continuing anyway, but Delegate column will be missing and permissions cannot be applied."
    }
    elseif (-not $hasDelegate)
    {
        Write-Warning "CSV is missing 'Delegate' column. Permission application may fail."
        Write-Warning "Expected CSV format from standard delegation report with columns:"
        Write-Warning "  - MailboxUPN, MailboxName, MailboxType, PermissionType, Delegate, DelegateAccessRights"
    }

    # Check for Exchange Online session
    Write-Verbose "Checking Exchange Online connection..."
    try
    {
        $sessionInfo = Get-ConnectionInformation -ErrorAction SilentlyContinue
        if (-not $sessionInfo -or $sessionInfo.State -ne "Connected")
        {
            Write-Error "No active Exchange Online session found. Please run Connect-ExchangeOnline first."
            Write-Information "Example: Connect-ExchangeOnline -UserPrincipalName youradmin@domain.com" -InformationAction Continue
            exit 1
        }
        else
        {
            Write-Information "Found active Exchange Online session: $($sessionInfo.Name)" -InformationAction Continue
        }
    }
    catch
    {
        Write-Error "Exchange Online module not available or no active session. Please run Connect-ExchangeOnline first."
        exit 1
    }

    # Check for on-premises Exchange session if needed
    if ($CreateOnPremMailbox)
    {
        Write-Verbose "Checking on-premises Exchange connection..."
        try
        {
            $onPremSession = Get-PSSession | Where-Object { $_.ConfigurationName -eq "Microsoft.Exchange" -and $_.ComputerName -notlike "*.outlook.com" }
            if (-not $onPremSession)
            {
                Write-Error "No active on-premises Exchange session found. Required for -CreateOnPremMailbox."
                Write-Information "Example: `$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://exchangeserver/PowerShell/ -Authentication Kerberos" -InformationAction Continue
                Write-Information "         Import-PSSession `$Session" -InformationAction Continue
                exit 1
            }
            else
            {
                Write-Information "Found active on-premises Exchange session: $($onPremSession.ComputerName)" -InformationAction Continue
            }
        }
        catch
        {
            Write-Error "Unable to verify on-premises Exchange connection. Required for -CreateOnPremMailbox."
            exit 1
        }
    }

    # Ensure output directory exists
    if (-not (Test-Path $OutputPath))
    {
        New-Item -Path $OutputPath -ItemType Directory -Force | Out-Null
        Write-Information "Created output directory: $OutputPath" -InformationAction Continue
    }

    # Phase 1: Create mailboxes if requested
    if ($CreateEXOMailbox -or $CreateOnPremMailbox)
    {
        Write-Information "Phase 1: Creating mailboxes..." -InformationAction Continue

        # Get unique mailboxes that need to be created
        $uniqueMailboxes = $delegationData | Select-Object -Property MailboxUPN, MailboxType -Unique

        $mbCounter = 0
        foreach ($mbInfo in $uniqueMailboxes)
        {
            $mbCounter++
            $targetMailboxUPN = $mbInfo.MailboxUPN

            # Apply domain replacement if specified
            if ($ReplaceMailboxDomain)
            {
                $localPart = $targetMailboxUPN.Split('@')[0]
                $targetMailboxUPN = "$localPart@$ReplaceMailboxDomain"
            }

            Write-Progress -Activity "Creating Mailboxes" -Status "Processing $targetMailboxUPN" -PercentComplete (($mbCounter / $uniqueMailboxes.Count) * 100)

            # Check if mailbox already exists
            try
            {
                $existingMailbox = Get-Mailbox -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                if ($existingMailbox)
                {
                    Write-Verbose "Mailbox already exists: $targetMailboxUPN"
                    continue
                }
            }
            catch
            {
                Write-Verbose "Mailbox does not exist: $targetMailboxUPN"
            }

            # Create mailbox
            if ($PSCmdlet.ShouldProcess($targetMailboxUPN, "Create mailbox"))
            {
                try
                {
                    if ($CreateEXOMailbox)
                    {
                        Write-Information "Creating Exchange Online mailbox: $targetMailboxUPN (Type: $($mbInfo.MailboxType))" -InformationAction Continue

                        # Determine mailbox creation approach based on type
                        if ($mbInfo.MailboxType -eq "SharedMailbox")
                        {
                            # Create shared mailbox - no licensing required
                            $localPart = $targetMailboxUPN.Split('@')[0]
                            New-Mailbox -Shared -Name $localPart -PrimarySmtpAddress $targetMailboxUPN
                            Write-Information "Successfully created shared mailbox: $targetMailboxUPN" -InformationAction Continue
                        }
                        elseif ($mbInfo.MailboxType -eq "RoomMailbox")
                        {
                            # Create room mailbox
                            $localPart = $targetMailboxUPN.Split('@')[0]
                            New-Mailbox -Room -Name $localPart -PrimarySmtpAddress $targetMailboxUPN
                            Write-Information "Successfully created room mailbox: $targetMailboxUPN" -InformationAction Continue
                        }
                        elseif ($mbInfo.MailboxType -eq "EquipmentMailbox")
                        {
                            # Create equipment mailbox
                            $localPart = $targetMailboxUPN.Split('@')[0]
                            New-Mailbox -Equipment -Name $localPart -PrimarySmtpAddress $targetMailboxUPN
                            Write-Information "Successfully created equipment mailbox: $targetMailboxUPN" -InformationAction Continue
                        }
                        else
                        {
                            # For user mailboxes, note that licensing is required
                            Write-Warning "User mailbox creation requires Azure AD user account with Exchange license: $targetMailboxUPN"
                            Write-Warning "Mailbox type '$($mbInfo.MailboxType)' creation not automated. Please create manually or use Azure AD provisioning."
                        }
                    }
                    elseif ($CreateOnPremMailbox)
                    {
                        Write-Information "Creating on-premises remote mailbox: $targetMailboxUPN" -InformationAction Continue
                        # New-RemoteMailbox creates the mailbox in Exchange Online via hybrid
                        New-RemoteMailbox -Name $targetMailboxUPN -UserPrincipalName $targetMailboxUPN -RemoteRoutingAddress "$($targetMailboxUPN.Split('@')[0])@$($sessionInfo.TenantId).mail.onmicrosoft.com"
                        Write-Information "Successfully created remote mailbox: $targetMailboxUPN" -InformationAction Continue
                    }
                }
                catch
                {
                    Write-Warning "Failed to create mailbox $targetMailboxUPN : $($_.Exception.Message)"
                }
            }
        }

        Write-Progress -Activity "Creating Mailboxes" -Completed

        # Wait for replication after mailbox creation
        if (-not $WhatIfPreference)
        {
            Write-Information "Waiting $RetryDelaySeconds seconds for mailbox replication..." -InformationAction Continue
            Start-Sleep -Seconds $RetryDelaySeconds
        }
    }

    # Phase 2: Apply delegation permissions
    Write-Information "Phase 2: Applying delegation permissions..." -InformationAction Continue

    $results = @()
    $errors = @()
    $processedCount = 0

    foreach ($delegation in $delegationData)
    {
        $processedCount++
        Write-Progress -Activity "Applying Delegation Permissions" -Status "Processing $($delegation.MailboxUPN) - $($delegation.PermissionType)" -PercentComplete (($processedCount / $delegationData.Count) * 100)

        # Skip non-delegation permission types
        if ($delegation.PermissionType -in @("InboxRule", "MailboxForwarding", "ForwardingRule"))
        {
            Write-Verbose "Skipping $($delegation.PermissionType) for $($delegation.MailboxUPN) - not a delegation permission"
            $results += [PSCustomObject]@{
                MailboxUPN = $delegation.MailboxUPN
                PermissionType = $delegation.PermissionType
                Delegate = $delegation.Delegate
                Status = "Skipped"
                Notes = "Permission type not applicable for delegation (use forwarding scripts for this)"
                ProcessedDate = Get-Date
            }
            continue
        }

        # Prepare mailbox and delegate identities with domain replacement
        $targetMailboxUPN = $delegation.MailboxUPN
        if ($ReplaceMailboxDomain)
        {
            $localPart = $targetMailboxUPN.Split('@')[0]
            $targetMailboxUPN = "$localPart@$ReplaceMailboxDomain"
        }

        $delegateIdentity = $delegation.Delegate
        if ($ReplaceDelegateDomain -and $delegateIdentity)
        {
            # Handle cases where delegate might be a GUID or other format
            if ($delegateIdentity -match '@')
            {
                $localPart = $delegateIdentity.Split('@')[0]
                $delegateIdentity = "$localPart@$ReplaceDelegateDomain"
            }
        }

        # Apply permission with retry logic
        $attemptCount = 0
        $success = $false
        $lastError = ""

        while ($attemptCount -lt $MaxRetries -and -not $success)
        {
            $attemptCount++

            if ($attemptCount -gt 1)
            {
                Write-Information "Retry attempt $attemptCount of $MaxRetries for $targetMailboxUPN - $($delegation.PermissionType)" -InformationAction Continue
                if (-not $WhatIfPreference)
                {
                    Start-Sleep -Seconds $RetryDelaySeconds
                }
            }

            try
            {
                Write-Verbose "Applying $($delegation.PermissionType) permission to $targetMailboxUPN for delegate $delegateIdentity"

                if ($PSCmdlet.ShouldProcess("$targetMailboxUPN", "Grant $($delegation.PermissionType) to $delegateIdentity"))
                {
                    switch ($delegation.PermissionType)
                    {
                        "FullAccess"
                        {
                            Add-MailboxPermission -Identity $targetMailboxUPN -User $delegateIdentity -AccessRights FullAccess -InheritanceType All -Confirm:$false
                            $success = $true
                        }

                        "SendAs"
                        {
                            # Try Add-RecipientPermission first (most common for Send As)
                            try
                            {
                                Add-RecipientPermission -Identity $targetMailboxUPN -Trustee $delegateIdentity -AccessRights SendAs -Confirm:$false
                                $success = $true
                            }
                            catch
                            {
                                # Fallback to Add-MailboxPermission if RecipientPermission fails
                                Write-Verbose "Add-RecipientPermission failed, trying Add-MailboxPermission for Send As"
                                Add-MailboxPermission -Identity $targetMailboxUPN -User $delegateIdentity -AccessRights SendAs -InheritanceType All -Confirm:$false
                                $success = $true
                            }
                        }

                        "SendOnBehalf"
                        {
                            # Send On Behalf is set on the mailbox object itself
                            $mailbox = Get-Mailbox -Identity $targetMailboxUPN
                            $currentDelegates = @($mailbox.GrantSendOnBehalfTo)

                            # Add delegate if not already present
                            if ($currentDelegates -notcontains $delegateIdentity)
                            {
                                $currentDelegates += $delegateIdentity
                                Set-Mailbox -Identity $targetMailboxUPN -GrantSendOnBehalfTo $currentDelegates -Confirm:$false
                            }
                            $success = $true
                        }

                        "AcceptMessagesOnlyFrom"
                        {
                            # Distribution group permission
                            $group = Get-DistributionGroup -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                            if (-not $group)
                            {
                                $group = Get-DynamicDistributionGroup -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                            }

                            if ($group)
                            {
                                $currentSenders = @($group.AcceptMessagesOnlyFrom)
                                if ($currentSenders -notcontains $delegateIdentity)
                                {
                                    $currentSenders += $delegateIdentity
                                    if ($group.RecipientTypeDetails -eq "DynamicDistributionGroup")
                                    {
                                        Set-DynamicDistributionGroup -Identity $targetMailboxUPN -AcceptMessagesOnlyFrom $currentSenders -Confirm:$false
                                    }
                                    else
                                    {
                                        Set-DistributionGroup -Identity $targetMailboxUPN -AcceptMessagesOnlyFrom $currentSenders -Confirm:$false
                                    }
                                }
                                $success = $true
                            }
                        }

                        "AcceptMessagesOnlyFromSendersOrMembers"
                        {
                            # Distribution group permission
                            $group = Get-DistributionGroup -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                            if (-not $group)
                            {
                                $group = Get-DynamicDistributionGroup -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                            }

                            if ($group)
                            {
                                $currentSenders = @($group.AcceptMessagesOnlyFromSendersOrMembers)
                                if ($currentSenders -notcontains $delegateIdentity)
                                {
                                    $currentSenders += $delegateIdentity
                                    if ($group.RecipientTypeDetails -eq "DynamicDistributionGroup")
                                    {
                                        Set-DynamicDistributionGroup -Identity $targetMailboxUPN -AcceptMessagesOnlyFromSendersOrMembers $currentSenders -Confirm:$false
                                    }
                                    else
                                    {
                                        Set-DistributionGroup -Identity $targetMailboxUPN -AcceptMessagesOnlyFromSendersOrMembers $currentSenders -Confirm:$false
                                    }
                                }
                                $success = $true
                            }
                        }

                        "GrantSendOnBehalfTo"
                        {
                            # Distribution group permission (same as SendOnBehalf for mailboxes)
                            $group = Get-DistributionGroup -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                            if (-not $group)
                            {
                                $group = Get-DynamicDistributionGroup -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                            }

                            if ($group)
                            {
                                $currentDelegates = @($group.GrantSendOnBehalfTo)
                                if ($currentDelegates -notcontains $delegateIdentity)
                                {
                                    $currentDelegates += $delegateIdentity
                                    if ($group.RecipientTypeDetails -eq "DynamicDistributionGroup")
                                    {
                                        Set-DynamicDistributionGroup -Identity $targetMailboxUPN -GrantSendOnBehalfTo $currentDelegates -Confirm:$false
                                    }
                                    else
                                    {
                                        Set-DistributionGroup -Identity $targetMailboxUPN -GrantSendOnBehalfTo $currentDelegates -Confirm:$false
                                    }
                                }
                                $success = $true
                            }
                        }

                        "ModeratedBy"
                        {
                            # Distribution group permission
                            $group = Get-DistributionGroup -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                            if (-not $group)
                            {
                                $group = Get-DynamicDistributionGroup -Identity $targetMailboxUPN -ErrorAction SilentlyContinue
                            }

                            if ($group)
                            {
                                $currentModerators = @($group.ModeratedBy)
                                if ($currentModerators -notcontains $delegateIdentity)
                                {
                                    $currentModerators += $delegateIdentity
                                    if ($group.RecipientTypeDetails -eq "DynamicDistributionGroup")
                                    {
                                        Set-DynamicDistributionGroup -Identity $targetMailboxUPN -ModeratedBy $currentModerators -Confirm:$false
                                    }
                                    else
                                    {
                                        Set-DistributionGroup -Identity $targetMailboxUPN -ModeratedBy $currentModerators -Confirm:$false
                                    }
                                }
                                $success = $true
                            }
                        }

                        default
                        {
                            Write-Warning "Unknown permission type: $($delegation.PermissionType)"
                            $lastError = "Unknown permission type: $($delegation.PermissionType)"
                        }
                    }
                }
                else
                {
                    # WhatIf scenario - mark as simulated
                    $success = $true
                }
            }
            catch
            {
                $lastError = $_.Exception.Message
                Write-Verbose "Attempt $attemptCount failed: $lastError"

                # Don't retry if it's a "not found" or "access denied" error
                if ($lastError -match "couldn't be found|access denied|not found|doesn't exist")
                {
                    Write-Warning "Permanent error detected, skipping retries: $lastError"
                    break
                }
            }
        }

        # Record result
        if ($success)
        {
            $results += [PSCustomObject]@{
                MailboxUPN = $targetMailboxUPN
                OriginalMailboxUPN = $delegation.MailboxUPN
                PermissionType = $delegation.PermissionType
                Delegate = $delegateIdentity
                OriginalDelegate = $delegation.Delegate
                Status = if ($WhatIfPreference) { "Simulated" } else { "Success" }
                Attempts = $attemptCount
                Notes = if ($WhatIfPreference) { "Simulation - no changes made" } else { "Permission applied successfully" }
                ProcessedDate = Get-Date
            }
        }
        else
        {
            $errors += [PSCustomObject]@{
                MailboxUPN = $targetMailboxUPN
                OriginalMailboxUPN = $delegation.MailboxUPN
                PermissionType = $delegation.PermissionType
                Delegate = $delegateIdentity
                OriginalDelegate = $delegation.Delegate
                Status = "Failed"
                Attempts = $attemptCount
                ErrorMessage = $lastError
                ProcessedDate = Get-Date
            }

            $results += [PSCustomObject]@{
                MailboxUPN = $targetMailboxUPN
                OriginalMailboxUPN = $delegation.MailboxUPN
                PermissionType = $delegation.PermissionType
                Delegate = $delegateIdentity
                OriginalDelegate = $delegation.Delegate
                Status = "Failed"
                Attempts = $attemptCount
                Notes = "Failed after $attemptCount attempts: $lastError"
                ProcessedDate = Get-Date
            }
        }
    }

    Write-Progress -Activity "Applying Delegation Permissions" -Completed

    # Export results
    if ($results.Count -gt 0)
    {
        Write-Information "Exporting results to CSV..." -InformationAction Continue
        $results | Sort-Object MailboxUPN, PermissionType, Delegate | Export-Csv $OutputFile -NoTypeInformation
        Write-Information "Results saved to: $OutputFile" -InformationAction Continue
    }

    if ($errors.Count -gt 0)
    {
        Write-Warning "Exporting error report..."
        $errors | Sort-Object MailboxUPN, PermissionType, Delegate | Export-Csv $ErrorFile -NoTypeInformation
        Write-Information "Error report saved to: $ErrorFile" -InformationAction Continue
    }

    # Display summary
    Write-Information "Mailbox Delegation Permission Application Summary:" -InformationAction Continue
    Write-Information "  Total Records Processed: $($delegationData.Count)" -InformationAction Continue
    Write-Information "  Successful: $(($results | Where-Object { $_.Status -eq 'Success' -or $_.Status -eq 'Simulated' }).Count)" -InformationAction Continue
    Write-Information "  Failed: $(($results | Where-Object { $_.Status -eq 'Failed' }).Count)" -InformationAction Continue
    Write-Information "  Skipped: $(($results | Where-Object { $_.Status -eq 'Skipped' }).Count)" -InformationAction Continue
    Write-Information "  Mode: $(if ($WhatIfPreference) { 'Simulation' } else { 'Live Application' })" -InformationAction Continue
    if ($ReplaceMailboxDomain) { Write-Information "  Mailbox Domain Replacement: $ReplaceMailboxDomain" -InformationAction Continue }
    if ($ReplaceDelegateDomain) { Write-Information "  Delegate Domain Replacement: $ReplaceDelegateDomain" -InformationAction Continue }
    Write-Information "  Output: $OutputFile" -InformationAction Continue
    if ($errors.Count -gt 0) { Write-Information "  Error Report: $ErrorFile" -InformationAction Continue }

    Write-Information "Permission Type Summary:" -InformationAction Continue
    $results | Group-Object PermissionType | Select-Object Name, Count | Sort-Object Name | ForEach-Object {
        Write-Information "  $($_.Name): $($_.Count)" -InformationAction Continue
    }

}
catch
{
    Write-Error "Script execution failed: $($_.Exception.Message)"
    Write-Error "Stack Trace: $($_.ScriptStackTrace)"
}
finally
{
    Write-Information "Mailbox Delegation Permission Application completed." -InformationAction Continue
}
